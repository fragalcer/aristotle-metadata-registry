# Generated by Django 2.2.6 on 2019-11-11 03:47

import aristotle_mdr.fields
import ckeditor_uploader.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('aristotle_mdr', '0075_auto_20190916_1602'),
    ]

    replaces = [
        ('aristotle_dse', '0001_squashed_0013_now_with_dcat'),
        ('aristotle_dse', '0014_auto_20161023_2304'),
        ('aristotle_dse', '0015_auto_20170608_0044'),
        ('aristotle_dse', '0016_auto_20171111_2335'),
        ('aristotle_dse', '0017_auto_20180510_0615'),
        ('aristotle_dse', '0018_auto_20181107_0433'),
        ('aristotle_dse', '0019_auto_20190204_2106'),
        ('aristotle_dse', '0020_auto_20190206_1930'),
        ('aristotle_dse', '0021_auto_20190415_0012'),
        ('aristotle_dse', '0022_auto_20190501_1043'),
        ('aristotle_dse', '0023_auto_20190501_1530'),
        ('aristotle_dse', '0024_auto_20190501_2242'),
        ('aristotle_dse', '0025_auto_20190528_1918'),
        ('aristotle_dse', '0026_auto_20190604_1201'),
        ('aristotle_dse', '0027_auto_20190624_1215'),
        ('aristotle_dse', '0028_auto_20190626_1500'),
        ('aristotle_dse', '0029_auto_20190711_0117'),
        ('aristotle_dse', '0030_auto_20190809_1241'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataCatalog',
            fields=[
                ('_concept_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='aristotle_mdr._concept')),
                ('issued', models.DateField(blank=True, help_text='Date of formal issuance (e.g., publication) of the catalog.', null=True)),
                ('dct_modified', models.DateTimeField(blank=True, help_text='Most recent date on which the catalog was changed, updated or modified.', null=True)),
                ('homepage', models.URLField(blank=True, help_text='The dataset specification to which this data source conforms', null=True)),
                ('spatial', models.TextField(blank=True, help_text='The geographical area covered by the catalog.', null=True)),
                ('license', models.TextField(blank=True, help_text='This links to the license document under which the catalog is made available and not the datasets. Even if the license of the catalog applies to all of its datasets and distributions, it should be replicated on each distribution.', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('aristotle_mdr._concept',),
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('_concept_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='aristotle_mdr._concept')),
                ('issued', models.DateField(blank=True, help_text='Date of formal issuance (e.g., publication) of the catalog.', null=True)),
                ('frequency', models.TextField(blank=True, help_text='The frequency at which dataset is published.', null=True)),
                ('spatial', models.TextField(blank=True, help_text='Spatial coverage of the dataset.', null=True)),
                ('temporal', models.TextField(blank=True, help_text='The temporal period that the dataset covers.', null=True)),
                ('landing_page', models.URLField(blank=True, help_text='A Web page that can be navigated to in a Web browser to gain access to the dataset, its distributions and/or additional information', null=True)),
                ('contact_point', models.TextField(blank=True, help_text='The temporal period that the dataset covers.', null=True)),
                ('dct_modified', models.DateTimeField(blank=True, help_text='Most recent date on which the dataset was changed, updated or modified.', null=True, verbose_name='Modification date')),
                ('catalog', models.ForeignKey(blank=True, help_text='An entity responsible for making the dataset available.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='aristotle_dse.DataCatalog')),
            ],
            options={
                'abstract': False,
            },
            bases=('aristotle_mdr._concept',),
        ),
        migrations.CreateModel(
            name='DataSetSpecification',
            fields=[
                ('_concept_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='aristotle_mdr._concept')),
                ('collection_method', ckeditor_uploader.fields.RichTextUploadingField(blank=True)),
                ('statistical_unit', aristotle_mdr.fields.ConceptForeignKey(blank=True, help_text='A Statistical Unit is the Object Class that is recorded against each entry described by this specification', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='statistical_unit_of', to='aristotle_mdr._concept', verbose_name='Statistical Unit')),
            ],
            options={
                'abstract': False,
            },
            bases=('aristotle_mdr._concept',),
        ),
        migrations.CreateModel(
            name='Distribution',
            fields=[
                ('_concept_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='aristotle_mdr._concept')),
                ('issued', models.DateField(blank=True, help_text='Date of formal issuance (e.g., publication) of the catalog.', null=True)),
                ('dct_modified', models.DateTimeField(blank=True, help_text='Most recent date on which the catalog was changed, updated or modified.', null=True, verbose_name='Modification date')),
                ('license', models.TextField(blank=True, help_text='This links to the license document under which the distribution is made available.', null=True)),
                ('rights', models.TextField(blank=True, help_text='Information about rights held in and over the distribution.', null=True)),
                ('access_URL', models.URLField(blank=True, help_text='A landing page, feed, SPARQL endpoint or other type of resource that gives access to the distribution of the dataset.', null=True)),
                ('download_URL', models.URLField(blank=True, help_text='A file that contains the distribution of the dataset in a given format.', null=True)),
                ('byte_size', models.TextField(blank=True, help_text='The size in bytes can be approximated when the precise size is not known.', null=True)),
                ('media_type', models.CharField(blank=True, help_text='The media type of the distribution as defined by IANA.', max_length=512, null=True)),
                ('format_type', models.CharField(blank=True, help_text='The file format of the distribution.', max_length=512, null=True)),
                ('dataset', models.ForeignKey(blank=True, help_text='Connects a distribution to its available datasets', null=True, on_delete=django.db.models.deletion.SET_NULL, to='aristotle_dse.Dataset')),
            ],
            options={
                'abstract': False,
            },
            bases=('aristotle_mdr._concept',),
        ),
        migrations.CreateModel(
            name='DSSGrouping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', aristotle_mdr.fields.ShortTextField(help_text='The name applied to the grouping.')),
                ('definition', ckeditor_uploader.fields.RichTextUploadingField(blank=True, verbose_name='definition')),
                ('order', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Position')),
                ('dss', aristotle_mdr.fields.ConceptForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='aristotle_dse.DataSetSpecification')),
                ('linked_group', models.ManyToManyField(blank=True, to='aristotle_dse.DSSGrouping')),
            ],
            options={
                'verbose_name': 'DSS Grouping',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='DSSDEInclusion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(blank=True, default='', help_text='Optional field for refering to this item within the DSS.', max_length=512)),
                ('maximum_occurrences', models.PositiveIntegerField(default=1, help_text='The maximum number of times a item can be included in a dataset', verbose_name='Maximum Occurrences')),
                ('inclusion', models.CharField(choices=[('optional', 'Optional'), ('conditional', 'Conditional'), ('mandatory', 'Mandatory')], default='conditional', help_text='Specifies if a field is required, optional or conditional within a dataset based on this specification.', max_length=20, verbose_name='Inclusion')),
                ('specific_information', ckeditor_uploader.fields.RichTextUploadingField(blank=True, help_text='Any additional information on the inclusion of a data element or cluster in a dataset.')),
                ('conditional_inclusion', ckeditor_uploader.fields.RichTextUploadingField(blank=True, help_text='If an item is present conditionally, this field defines the conditions under which an item will appear.', verbose_name='Conditional Inclusion')),
                ('order', models.PositiveSmallIntegerField(blank=True, help_text='If a dataset is ordered, this indicates which position this item is in a dataset.', null=True, verbose_name='Position')),
                ('data_element', aristotle_mdr.fields.ConceptForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dssInclusions', to='aristotle_mdr.DataElement')),
                ('dss', aristotle_mdr.fields.ConceptForeignKey(on_delete=django.db.models.deletion.CASCADE, to='aristotle_dse.DataSetSpecification')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='aristotle_dse.DSSGrouping')),
                ('specialisation_classes', aristotle_mdr.fields.ConceptManyToManyField(blank=True, to='aristotle_mdr.ObjectClass')),
            ],
            options={
                'verbose_name': 'DSS Data Element',
                'ordering': ['order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DSSClusterInclusion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(blank=True, default='', help_text='Optional field for refering to this item within the DSS.', max_length=512)),
                ('maximum_occurrences', models.PositiveIntegerField(default=1, help_text='The maximum number of times a item can be included in a dataset', verbose_name='Maximum Occurrences')),
                ('inclusion', models.CharField(choices=[('optional', 'Optional'), ('conditional', 'Conditional'), ('mandatory', 'Mandatory')], default='conditional', help_text='Specifies if a field is required, optional or conditional within a dataset based on this specification.', max_length=20, verbose_name='Inclusion')),
                ('specific_information', ckeditor_uploader.fields.RichTextUploadingField(blank=True, help_text='Any additional information on the inclusion of a data element or cluster in a dataset.')),
                ('conditional_inclusion', ckeditor_uploader.fields.RichTextUploadingField(blank=True, help_text='If an item is present conditionally, this field defines the conditions under which an item will appear.', verbose_name='Conditional Inclusion')),
                ('order', models.PositiveSmallIntegerField(blank=True, help_text='If a dataset is ordered, this indicates which position this item is in a dataset.', null=True, verbose_name='Position')),
                ('child', aristotle_mdr.fields.ConceptForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parent_dss', to='aristotle_dse.DataSetSpecification')),
                ('dss', aristotle_mdr.fields.ConceptForeignKey(on_delete=django.db.models.deletion.CASCADE, to='aristotle_dse.DataSetSpecification')),
            ],
            options={
                'verbose_name': 'DSS Cluster',
                'ordering': ['order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DistributionDataElementPath',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logical_path', models.CharField(help_text='A text expression that specifies how to identify which series of data in the distribution maps to this data element', max_length=256)),
                ('order', models.PositiveSmallIntegerField(blank=True, help_text='Column position within a dataset.', null=True, verbose_name='Position')),
                ('data_element', aristotle_mdr.fields.ConceptForeignKey(blank=True, help_text='An entity responsible for making the dataset available.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='aristotle_mdr.DataElement', verbose_name='Data Element')),
                ('distribution', models.ForeignKey(blank=True, help_text='A relation to the DCAT Distribution Record.', null=True, on_delete=django.db.models.deletion.CASCADE, to='aristotle_dse.Distribution')),
                ('specialisation_classes', aristotle_mdr.fields.ConceptManyToManyField(blank=True, to='aristotle_mdr.ObjectClass')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
    ]
